from pefile import PE, DIRECTORY_ENTRY
from signify import authenticode
import sys
import pyfiglet

def parse_pefile(path):
    try:
        sample = PE(path)
    except Exception as e:
        print(f"Error: {e}")
    
    print("\t========== 1. file info ==========")
    print(f"sample is a DLL: {sample.is_dll()}")
    print(f"sample is a EXE: {sample.is_exe()}")
    print(f"sample is a driver: {sample.is_driver()}")
    
    print("\n\t========== 2. file certificates and signature ==========")
    # check if sample is signed
    print("Checking using singify's Authenticode...")
    with open(path, "rb") as file:
        sig = authenticode.SignedPEFile(file)
        try:
            print(f"\tverify: {sig.verify()}")
        except Exception as e:
            print(f"\tThe PE file does not contain a certificate table.")
    print("Checking using Directory Entry Security...")
    if hasattr(sample, 'DIRECTORY_ENTRY_SECURITY'):
        directory_entry = sample.OPTIONAL_HEADER.DATA_DIRECTORY[DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_SECURITY']]
        certificate_table = sample.parse_certificates(directory_entry.VirtualAddress, directory_entry.Size)
        print(f"\tcertificate table: {certificate_table}")
    else:
        print("\tNo certificate table found.")
        
    print("\n\t========== 3. sections ==========")    
    for section in sample.sections:
        print("Section:")
        print("\tName: ", section.Name.decode().strip('\x00'))
        print(f"\tVirtual Size: {section.Misc_VirtualSize}")
        print(f"\tRaw Size: {section.SizeOfRawData}")
        print(f"\tEntropy: {section.get_entropy()}")
        print("\n")
        
    print("\n\t========== 4. rich header ==========")
    try:
        rich_header = sample.parse_rich_header()
        print("file has a rich header ")
        print("Check sum of the rich header: ", hex(rich_header['checksum']))
    except Exception as e:
        print("No rich header: ", e)
        
    print("\n\t========== 5. IMAGE_FILE_HEADER info ==========")
    print(f"IMAGE_FILE_HEADER: \n{sample.FILE_HEADER}")
    print(f"\n\tTimestamp from IMAGE_FILE_HEADER: {sample.FILE_HEADER.TimeDateStamp}")
    
    print("\n\t========== 6. DEBUG_DIRECTORY info ==========")
    try:
        debug_data = sample.DIRECTORY_ENTRY_DEBUG
        if debug_data:
            for entry in debug_data:
                print("PE contains a debug directory.")
                print("\tTimestamp for debug directory : ", entry.struct.TimeDateStamp)
                print("\tPDB filepath", entry.entry.PdbFileName.decode())
        else:
            print("PE does not contain a debug directory.")
    except Exception as e:
        print("Error getting debug directory found: ", e)
    

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print(f"Missing argument. Usage: python3 {sys.argv[0]} <file-path>")
    else:
        result = pyfiglet.figlet_format("PE Parser", font="speed")
        print(result)
        parse_pefile(sys.argv[1])